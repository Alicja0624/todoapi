@page "/"
@inject HttpClient Http

@if (accountState == 2)
{
	<EditForm Model="@this" OnSubmit="Register">
		<label for="register">Rejestracja</label><br />
		<input @bind="username" placeholder="Login" /><br />
		<input @bind="password" placeholder="Hasło" type="password" /><br />
		<input @bind="password_copy" placeholder="Powtórz hasło" type="password" /><br />
		<button type="submit">Utwórz konto</button>
		<button @onclick="() => ChangeAccountState(0)">Anuluj</button>
	</EditForm>
}
else if (accountState == 1)
{
	<EditForm Model="@this" OnSubmit="LoadTasks">
		<label for="login">Logowanie</label><br />
		<input @bind="username" placeholder="Login" /><br />
		<input @bind="password" placeholder="Hasło" type="password" /><br />
		<button type="submit">Zaloguj się</button>
		<button @onclick="() => ChangeAccountState(0)">Anuluj</button>
	</EditForm>
}
else if (accountState == 3)
{
	<EditForm Model="@this" OnSubmit="() => ChangeAccountState(4)">
		<label for="delete">Usuwanie konta</label><br />
		<input @bind="username" placeholder="Login" /><br />
		<input @bind="password" placeholder="Hasło" type="password" /><br />
		<button type="submit">Usuń konto</button>
		<button @onclick="() => ChangeAccountState(0)">Anuluj</button>
	</EditForm>
}
else if (accountState == 4)
{
	<EditForm Model="@this" OnSubmit="DeleteAccount">
		<label for="delete">Czy na pewno chcesz usunąć konto?</label><br />
		<input @bind="username" placeholder="Login" /><br />
		<input @bind="password" placeholder="Hasło" type="password" /><br />
		<button type="submit">Tak</button>
		<button @onclick="() => ChangeAccountState(0)">Anuluj</button>
	</EditForm>
}
else
{
	<button @onclick="() => ChangeAccountState(1)">Logowanie</button><br />
	<button @onclick="() => ChangeAccountState(2)">Rejestrowanie</button><br />
	<button @onclick="() => ChangeAccountState(3)">Usuwanie konta</button>
}

<br /><br /><h3>@title</h3>

<label for="sort">Sortowanie:</label>
<select name="sort" id="sort" @bind=sorting @bind:after="LoadTasks">
	<option value="name">alfabetyczne</option>
	<option value="priority">priorytet</option>
	<option value="oldest">od najstarszych</option>
	<option value="newest">od najnowszych</option>
	<option value="due" selected>termin</option>
</select>
<br />

<input type="checkbox" id="onlyNotCompleted" name="onlyNotCompleted" @bind=onlyNotCompleted @bind:after="LoadTasks" />
<label for="onlyNotCompleted">Pokaż tylko nieukończone</label>
<br />

<input type="checkbox" id="showPriority" name="showPriority" @bind=showPriority @bind:after="StateHasChanged" />
<label for="showPriority">Pokaż priorytet zadań</label>
<br />

<label for="minPriority">Minimalny priorytet:</label>
<input type="number" id="minPriority" name="minPriority" @bind=minPriority @bind:after="LoadTasks" />
<br />

@if (tasks is not null)
{
	if (tasks.Count == 0)
	{
		<br /><p>Brak zadań do wyświetlenia</p>
	}
	else
	{
		<br /><p>Zadania:</p>
		@foreach (var t in tasks)
		{
			if (editId == t.Id)
			{
				<div style="display: flex; align-items: center">
					@if (t.ParentTaskId is not null)
					{
						<span style="display:inline-block; width:20px;"></span>
					}
					<input type="checkbox" id=@t.Id name=@t.Id value="complete" @bind="isComplete" />
					<div style="display: flex; flex-direction: column;">
						<input @bind="name" placeholder="Nazwa zadania" />
						<textarea @bind="description" type="" placeholder="Opis (opcjonalnie)" />
					</div>
					<div style="display: flex; flex-direction: column;">
						<div>
							<label for="dueDate">Termin: </label>
							<input type="datetime-local" step="1" @bind="dueDate" />
						</div>
						<div>
							<label for="priority">Priorytet: </label>
							<input type="number" id="priority" name="priority" @bind="priority" />
						</div>
					</div>
					<button @onclick="SubmitEdit">&#x1F5F8;</button>
				</div>
			}
			else
			{
				colour = hoverId == t.Id ? "black" : "white";
				<div @onmouseover="() => hoverId = t.Id" @onmouseout="() => hoverId = null">
					@if (t.ParentTaskId is not null)
					{
						<span style="display:inline-block; width:20px;"></span>
					}

					<input type="checkbox" id=@t.Id name=@t.Id value="complete"
						checked="@t.IsComplete" @onchange="() => TickTask(t.Id)" />

					<label for=@t.Id>@t.Name&nbsp;</label>
					@if (showPriority)
					{
						<label for=@t.Priority style="color: grey; font-size: small">(@t.Priority)&nbsp;&nbsp;&nbsp;&nbsp;</label>
					}
					else
					{
						<label>&nbsp;&nbsp;&nbsp;</label>
					}

					@if (t.ParentTaskId is null)
					{
						<a style="text-decoration:none; color:@colour; cursor:pointer"
							@onclick="() => AddChild(t.Id)">&#xFF0B;</a>
					}
					<a style="text-decoration:none; color:@colour; cursor:pointer"
						@onclick="() => EditTask(t.Id)">&#x1F589;</a>
					<a style="text-decoration:none; color:@colour; cursor:pointer"
					   @onclick="() => DeleteTask(t.Id)">&#x1F5D1;</a>

					@if (!string.IsNullOrEmpty(t.Description))
					{
						<br />
						@if (t.ParentTaskId is not null)
						{
							<span style="display:inline-block; width:20px;"></span>
						}
						<label for=@t.Id style="font-style: italic; color: grey; font-size: small;">
							@t.Description
						</label>
					}
					@if (t.DueDate is not null)
					{
						<br />
						@if (t.ParentTaskId is not null)
						{
							<span style="display:inline-block; width:20px;"></span>
						}
						<label for=@t.Id style="font-style: italic; color: grey; font-size: x-small;">
							Na @t.DueDate
						</label>
					}
				</div>
			}
		}
	}
}

@if (addingMode)
{
	<div style="display: flex; align-items: center">
		<button @onclick="AddTask">+</button>
		<div style="display: flex; flex-direction: column;">
			<input @bind="name" placeholder="Nazwa zadania" />
			<textarea @bind="description" type="" placeholder="Opis (opcjonalnie)" />
		</div>
		<div style="display: flex; flex-direction: column;">
			<div>
				<label for="dueDate">Termin: </label>
				<input type="datetime-local" step="1" @bind="dueDate" />
			</div>
			<div>
				<label for="priority">Priorytet: </label>
				<input type="number" id="priority" name="priority" @bind="priority" />
			</div>
		</div>
	</div>
}
else
{
	<div style="display: flex; align-items: center">
		<button @onclick="AddingModeOn">+</button>
		<!--Ukryty div dla zachowania układu-->
		<div style="display: flex; flex-direction: column; visibility:hidden;">
			<input @bind="name" placeholder="Nazwa zadania" disabled />
			<textarea @bind="description" type="" placeholder="Opis (opcjonalnie)" disabled />
		</div>
	</div>
}

@code {
	private string username, password, title, sorting, priorityString, name, colour, description, password_copy;
	private bool onlyNotCompleted, addingMode, isComplete, showPriority;
	private int? minPriority, hoverId, editId;
	private int priority = 0, accountState = 0;
	// account_state: 0 - nic; 1 - logowanie; 2 - rejestrowanie; 3 - usuwanie konta; 4 - czy na pewno?
	private DateTime? dueDate;
	private List<Todo>? tasks;

	protected override async Task OnInitializedAsync()
	{
		await LoadTasks();
	}

	private async Task LoadTasks()
	{
		tasks = new List<Todo>(); // Czyści poprzednie zadania

		if (minPriority is not null)
			priorityString = $"&minPriority={minPriority}";
		else
			priorityString = "";

		var req = new { username, password };

		var response = await Http.PostAsJsonAsync($"/listtasks?sorting={sorting}&onlyNotCompleted={onlyNotCompleted}{priorityString}", req);
		if (response.IsSuccessStatusCode)
		{
			accountState = 0;
			if (string.IsNullOrEmpty(username))
				title = "Lista zadań publicznych";
			else
				title = $"Lista zadań konta {username}";
			tasks = await response.Content.ReadFromJsonAsync<List<Todo>>();
		}
		else
		{
			title = await response.Content.ReadAsStringAsync();
			title = title.Replace("\"", "");
			tasks = null;
		}

		StateHasChanged();
	}

	private void AddingModeOn()
	{
		editId = null;
		addingMode = true;
	}

	private async void AddTask()
	{
		var req = new { name, description, dueDate, priority, username, password };

		if (string.IsNullOrEmpty(name))
		{
			addingMode = false;
			return;
		}

		var response = await Http.PostAsJsonAsync($"/addtask", req);

		if (response.IsSuccessStatusCode)
		{
			addingMode = false;
			await LoadTasks();

			name = "";
			description = "";
			dueDate = null;
			priority = 0;
		}
		else
		{
			title = response.StatusCode.ToString();
		}
	}

	private async void TickTask(int id)
	{
		var req = new { username, password };

		var response = await Http.PatchAsJsonAsync($"/ticktask/{id}", req);
		if (!response.IsSuccessStatusCode)
		{
			title = response.StatusCode.ToString();
			tasks = null;
		}
	}

	private async void DeleteTask(int id)
	{
		var req = new { username, password };

		var response = await Http.PostAsJsonAsync($"/deletetask/{id}", req);
		if (response.IsSuccessStatusCode)
		{
			await LoadTasks();
		}
		else
		{
			title = response.StatusCode.ToString();
		}
	}

	private void EditTask(int id)
	{
		addingMode = false;
		editId = id;

		name = tasks?.FirstOrDefault(t => t.Id == id)?.Name;
		description = tasks?.FirstOrDefault(t => t.Id == id)?.Description;
		dueDate = tasks?.FirstOrDefault(t => t.Id == id)?.DueDate;
		priority = tasks?.FirstOrDefault(t => t.Id == id)?.Priority ?? 0;
		isComplete = tasks?.FirstOrDefault(t => t.Id == id)?.IsComplete ?? false;
	}

	private async void SubmitEdit()
	{
		var req = new { name, description, dueDate, priority, isComplete, username, password };

		var response = await Http.PatchAsJsonAsync($"/edittask/{editId}", req);
		if (response.IsSuccessStatusCode)
		{
			editId = null;
			await LoadTasks();
		}
		else
		{
			title = response.StatusCode.ToString();
		}
	}

	private async void AddChild(int parentId)
	{
		var req = new { name, username, password };

		name = " ";

		var response = await Http.PostAsJsonAsync($"/addchildtask/{parentId}", req);

		if (response.IsSuccessStatusCode)
		{
			LoadTasks();
			int newTaskId = await response.Content.ReadFromJsonAsync<int>();
			EditTask(newTaskId);
		}
		else
		{
			title = response.StatusCode.ToString();
		}
	}

	private async void Register()
	{
		var req = new { username, password };

		if (password == password_copy)
		{
			var response = await Http.PostAsJsonAsync($"/user/register", req);

			if (response.IsSuccessStatusCode)
			{
				accountState = 0;
				LoadTasks();
			}
			else
			{
				title = response.StatusCode.ToString();
			}
		}
		else
		{
			title = "Hasła nie są identyczne";
		}
	}

	private async void DeleteAccount()
	{
		var req = new { username, password };
		var response = await Http.PostAsJsonAsync($"/user/remove", req);
		if (response.IsSuccessStatusCode)
		{
			accountState = 0;
			username = "";
			password = "";
			LoadTasks();
		}
		else
		{
			title = response.StatusCode.ToString();
		}
	}

	private async void ChangeAccountState(int i)
	{
		accountState = i;
		StateHasChanged();
	}

	public class Todo
	{
		public int Id { get; set; }
		public string Name { get; set; }
		public string Description { get; set; } = "";
		public int Priority { get; set; } = 0;
		public bool IsComplete { get; set; }
		public int? UserId { get; set; }
		public int? ParentTaskId { get; set; }
		public DateTime? CreatedAt { get; set; } = DateTime.UtcNow;
		public DateTime? DueDate { get; set; }

	}
}
